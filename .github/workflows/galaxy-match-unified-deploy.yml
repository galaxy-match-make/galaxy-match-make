name: Galaxy Match - Unified Deployment

on:
  push:
    branches:
      - main
      - dev
      - peo/clean-up
    paths:
      - 'api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        type: choice
        options:
          - development
          - staging
          - production
        default: 'development'
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: af-south-1
  CONTAINER_NAME: galaxy-match-api
  PARAMETER_PREFIX: "/galaxy-match"
  DOTNET_VERSION: '8.0.103'

jobs:
  deploy:
    name: Deploy API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set environment based on trigger
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "Selected environment: $(cat $GITHUB_ENV | grep ENVIRONMENT | cut -d '=' -f2)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Store application secrets in AWS Parameter Store
      - name: Store Application Secrets in Parameter Store
        run: |
          # Store database connection string
          aws ssm put-parameter \
            --name "${{ env.PARAMETER_PREFIX }}/${{ env.ENVIRONMENT }}/ConnectionStrings/DefaultConnection" \
            --description "Database connection string" \
            --type "SecureString" \
            --value "${{ secrets.DB_CONNECTION_STRING }}" \
            --overwrite

          # Store Google OAuth credentials
          aws ssm put-parameter \
            --name "${{ env.PARAMETER_PREFIX }}/${{ env.ENVIRONMENT }}/Google/ClientId" \
            --description "Google OAuth client ID" \
            --type "SecureString" \
            --value "${{ secrets.GOOGLE_CLIENT_ID }}" \
            --overwrite

          aws ssm put-parameter \
            --name "${{ env.PARAMETER_PREFIX }}/${{ env.ENVIRONMENT }}/Google/ClientSecret" \
            --description "Google OAuth client secret" \
            --type "SecureString" \
            --value "${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --overwrite

          aws ssm put-parameter \
            --name "${{ env.PARAMETER_PREFIX }}/${{ env.ENVIRONMENT }}/Google/RedirectUri" \
            --description "Google OAuth redirect URI" \
            --type "SecureString" \
            --value "${{ secrets.GOOGLE_REDIRECT_URI }}" \
            --overwrite

          echo "Stored application secrets in Parameter Store for environment: ${{ env.ENVIRONMENT }}"

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Add the AWS SSM package if needed
      - name: Add AWS SSM package
        working-directory: api
        run: |
          if ! grep -q "AWSSDK.SimpleSystemsManagement" galaxy-match-make.csproj; then
            dotnet add package AWSSDK.SimpleSystemsManagement
          fi

      # Create clean appsettings for deployment
      - name: Prepare clean appsettings
        working-directory: api
        run: |
          cat <<EOF > appsettings.json
          {
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            },
            "AllowedHosts": "*"
          }
          EOF

      - name: Build project
        working-directory: api
        run: |
          dotnet build -c Release
          echo "Build successful"

      - name: Login to ECR repo
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push image to ECR
        working-directory: api
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create a 12-factor compliant Dockerfile
          cat > Dockerfile.12factor << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
          WORKDIR /app
          EXPOSE 8080

          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /src
          COPY ["galaxy-match-make.csproj", "./"]
          RUN dotnet restore "galaxy-match-make.csproj"
          COPY . .
          RUN dotnet build "galaxy-match-make.csproj" -c Release -o /app/build

          FROM build AS publish
          RUN dotnet publish "galaxy-match-make.csproj" -c Release -o /app/publish /p:UseAppHost=false

          FROM base AS final
          WORKDIR /app
          COPY --from=publish /app/publish .
          
          # Install AWS CLI for Parameter Store access
          RUN apt-get update && apt-get install -y \
              curl \
              unzip \
              jq \
              && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
              && unzip awscliv2.zip \
              && ./aws/install \
              && rm -rf awscliv2.zip aws \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*

          # Add entrypoint script that sets up environment from Parameter Store
          COPY entrypoint.sh /app/
          RUN chmod +x /app/entrypoint.sh
          
          ENTRYPOINT ["/app/entrypoint.sh"]
          EOF

          # Create entrypoint script for Parameter Store integration
          cat > entrypoint.sh << 'EOF'
          #!/bin/bash
          set -e

          # Get environment (passed as ENV variable to docker)
          ENV=${ASPNETCORE_ENVIRONMENT:-"development"}
          ENV=$(echo "$ENV" | tr '[:upper:]' '[:lower:]')
          PARAM_PREFIX="/galaxy-match/${ENV}"
          
          echo "Setting up environment variables from AWS Parameter Store for: $ENV"
          
          # Function to recursively get parameters and set as environment variables
          function get_parameters() {
              local path=$1
              local params
              
              # Get parameters for the specified path
              params=$(aws ssm get-parameters-by-path \
                  --path "$path" \
                  --recursive \
                  --with-decryption \
                  --output json)
              
              # Exit if no parameters found or command failed
              if [ $? -ne 0 ] || [ -z "$params" ]; then
                  echo "No parameters found at path: $path or error retrieving parameters"
                  return
              fi
              
              # Process each parameter
              echo "$params" | jq -c '.Parameters[]' | while read -r param; do
                  local name=$(echo "$param" | jq -r '.Name')
                  local value=$(echo "$param" | jq -r '.Value')
                  
                  # Convert parameter name to environment variable format
                  # Remove the prefix and replace / with __
                  local env_name=$(echo "$name" | sed "s#$PARAM_PREFIX/##" | sed 's#/#__#g')
                  
                  # Set environment variable
                  export "$env_name"="$value"
                  echo "Set environment variable: $env_name"
              done
          }
          
          # Enable AWS Parameter Store
          export USE_PARAMETER_STORE=true
          
          # Get all parameters for the current environment
          get_parameters "$PARAM_PREFIX" || echo "Warning: Failed to get parameters, proceeding with local configuration"
          
          echo "Starting application..."
          exec dotnet galaxy-match-make.dll
          EOF

          # Build and push the Docker image
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f Dockerfile.12factor .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Get the EC2 instance IP from GitHub variables
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ vars.EC2_INSTANCE_PUBLIC_IP }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ secrets.USERNAME }}
          envs: REGISTRY, REPOSITORY, IMAGE_TAG, AWS_REGION, CONTAINER_NAME, ENVIRONMENT
          script: |
            # Configure Docker to access ECR
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $REGISTRY
            
            # Pull the latest image
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            
            # Stop and remove the existing container if it exists
            if sudo docker ps -a --format '{{.Names}}' | grep -w "$CONTAINER_NAME" > /dev/null; then
                echo "Stopping existing container..."
                sudo docker stop "$CONTAINER_NAME"
                sudo docker rm "$CONTAINER_NAME"
            fi
            
            # Run the new container with the environment variable
            sudo docker run -d --name $CONTAINER_NAME \
              -p 8080:8080 \
              -e ASPNETCORE_ENVIRONMENT="${ENVIRONMENT}" \
              -e AWS_REGION="$AWS_REGION" \
              $REGISTRY/$REPOSITORY:$IMAGE_TAG
            
            echo "Deployment completed successfully!"