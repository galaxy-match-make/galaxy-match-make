name: Deploy to EC2

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - dev
    paths:
      - 'api/**'
        
defaults:
  run:
    working-directory: api

env:
  AWS_REGION: af-south-1
  CONTAINER_NAME: csharp-level-up-app

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [8.0.103]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{matrix.dotnet-version}}

      - name: Build project
        run: |
          dotnet build -c Release
          echo "build successful"
  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate appsettings.Development.json
        working-directory: api
        run: |
          file=appsettings.Development.json

          echo "{" > $file
          echo '  "ConnectionStrings": {' >> $file
          echo "    \"DefaultConnection\": \"Host=${{ secrets.AWS_RDS_ENDPOINT }};Port=5432;Database=${{secrets.TF_VAR_DB_USERNAME}};Username=${{secrets.TF_VAR_DB_PASSWORD}};Password=${{secrets.TF_VAR_DB_PASSWORD}}\"" >> $file
          echo "  }," >> $file
          echo '  "Google": {' >> $file
          echo "    \"ClientId\": \"${{ secrets.GOOGLE_CLIENT_ID }}\"," >> $file
          echo "    \"ClientSecret\": \"${{ secrets.GOOGLE_CLIENT_SECRET }}\"" >> $file
          echo "  }," >> $file
          echo '  "Logging": {' >> $file
          echo '    "LogLevel": {' >> $file
          echo '      "Default": "Information",' >> $file
          echo '      "Microsoft.AspNetCore": "Warning"' >> $file
          echo '    }' >> $file
          echo '  },' >> $file
          echo '  "AllowedHosts": "*"' >> $file
          echo "}" >> $file

      - name: Login to ECR repo
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push image to ecr
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: csharp-levelup-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        env:
          REPOSITORY: csharp-levelup-repo
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ vars.EC2_INSTANCE_PUBLIC_IP }}
          USER_NAME: ${{ secrets.USERNAME }}
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOSTNAME }}
          port: 22
          key: ${{ env.EC2_PRIVATE_KEY }}
          username: ${{ env.USER_NAME }}
          envs: REGISTRY, REPOSITORY, IMAGE_TAG, AWS_REGION, CONTAINER_NAME
          script: |-
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $REGISTRY
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            if sudo docker ps -a --format '{{.Names}}' | grep -w "$CONTAINER_NAME" > /dev/null; then
                echo "Container '$CONTAINER_NAME' exists. Stopping..."
                sudo docker stop "$CONTAINER_NAME"
                sudo docker rm "$CONTAINER_NAME"
            else
                echo "Container does not exist. No action taken."
            fi
            sudo docker run -d --name $CONTAINER_NAME -p 8080:8080 -e ASPNETCORE_ENVIRONMENT=Development $REGISTRY/$REPOSITORY:$IMAGE_TAG