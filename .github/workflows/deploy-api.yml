name: Deploy to EC2

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - dev
    paths:
      - 'api/**'
        
defaults:
  run:
    working-directory: api

env:
  AWS_REGION: af-south-1
  APP_NAME: galaxy-match-make
  PUBLISH_DIR: publish

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [8.0.103]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{matrix.dotnet-version}}

      # Set environment for branch
      - name: Set environment for branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DOTNET_ENVIRONMENT=Production" >> $GITHUB_ENV
            echo "APPSETTINGS_SECRET=APPSETTINGS_PRODUCTION" >> $GITHUB_ENV
          else
            echo "DOTNET_ENVIRONMENT=Development" >> $GITHUB_ENV
            echo "APPSETTINGS_SECRET=APPSETTINGS_DEVELOPMENT" >> $GITHUB_ENV
          fi

      # Add the appsettings from GitHub secrets before build/publish
      - name: Add appsettings from secrets
        run: |
          cat << EOF > appsettings.${{ env.DOTNET_ENVIRONMENT }}.json
          ${{ secrets[env.APPSETTINGS_SECRET] }}
          EOF
          echo "Added appsettings.${{ env.DOTNET_ENVIRONMENT }}.json from GitHub secrets"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and publish project
        run: |
          dotnet publish -c Release -o ${{ env.PUBLISH_DIR }} --no-restore

      - name: Create deployment package
        run: |
          tar -czf ${{ env.APP_NAME }}.tar.gz -C ${{ env.PUBLISH_DIR }} .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        env:
          EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ vars.EC2_INSTANCE_PUBLIC_IP }}
          USER_NAME: ${{ secrets.USERNAME }}
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOSTNAME }}
          port: 22
          key: ${{ env.EC2_PRIVATE_KEY }}
          username: ${{ env.USER_NAME }}
          script: |
            # Create application directory if it doesn't exist
            mkdir -p ~/app/${{ env.APP_NAME }}
            
            # Create a systemd service file if it doesn't exist
            if [ ! -f /etc/systemd/system/${{ env.APP_NAME }}.service ]; then
              sudo bash -c 'cat > /etc/systemd/system/${{ env.APP_NAME }}.service << EOF
            [Unit]
            Description=${{ env.APP_NAME }} .NET Web Application
            After=network.target

            [Service]
            WorkingDirectory=/home/${{ env.USER_NAME }}/app/${{ env.APP_NAME }}
            ExecStart=/usr/bin/dotnet /home/${{ env.USER_NAME }}/app/${{ env.APP_NAME }}/${{ env.APP_NAME }}.dll
            Restart=always
            RestartSec=10
            SyslogIdentifier=${{ env.APP_NAME }}
            User=${{ env.USER_NAME }}
            Environment=ASPNETCORE_ENVIRONMENT=${{ env.DOTNET_ENVIRONMENT }}
            Environment=ASPNETCORE_URLS=http://0.0.0.0:8080

            [Install]
            WantedBy=multi-user.target
            EOF'
            fi

      - name: Copy application files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ vars.EC2_INSTANCE_PUBLIC_IP }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "api/${{ env.APP_NAME }}.tar.gz"
          target: "~/app/"
          strip_components: 1

      - name: Extract files and restart service
        env:
          EC2_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ vars.EC2_INSTANCE_PUBLIC_IP }}
          USER_NAME: ${{ secrets.USERNAME }}
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOSTNAME }}
          port: 22
          key: ${{ env.EC2_PRIVATE_KEY }}
          username: ${{ env.USER_NAME }}
          script: |
            # Stop the service if running
            sudo systemctl stop ${{ env.APP_NAME }}.service || true
            
            # Extract new files to app directory
            tar -xzf ~/app/${{ env.APP_NAME }}.tar.gz -C ~/app/${{ env.APP_NAME }}
            
            # Log environment and appsettings
            echo "Deploying with ASPNETCORE_ENVIRONMENT=${{ env.DOTNET_ENVIRONMENT }}"
            echo "Appsettings files in the directory:"
            ls -la ~/app/${{ env.APP_NAME }}/appsettings*
            
            # Set permissions
            chmod +x ~/app/${{ env.APP_NAME }}
            
            # Enable and restart the service
            sudo systemctl enable ${{ env.APP_NAME }}.service
            sudo systemctl start ${{ env.APP_NAME }}.service
            
            # Check status
            sudo systemctl status ${{ env.APP_NAME }}.service
            
            # Clean up
            rm ~/app/${{ env.APP_NAME }}.tar.gz