name: Unified Terraform Apply

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - peo/deploy-api

jobs:
  terraform:
    name: Apply Infrastructure
    runs-on: ubuntu-latest
    outputs:
      api_instance_dns: ${{ steps.terraform_api_output.outputs.api_instance_public_dns }}
      ecr_repository_url: ${{ steps.terraform_api_output.outputs.ecr_repository_url }}
      db_endpoint: ${{ steps.terraform_backend_output.outputs.postgresql_server_endpoint }}
      db_connection_string: ${{ steps.terraform_backend_output.outputs.db_connection_string }}
      api_suffix: ${{ steps.terraform_api_output.outputs.random_suffix }}
      backend_suffix: ${{ steps.terraform_backend_output.outputs.random_suffix }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.0.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: GithubActionsSession
          
      # Apply Backend infrastructure first 
      - name: Terraform Init (Backend)
        id: init_backend
        run: terraform init
        working-directory: backend/terraform

      - name: Terraform Plan (Backend)
        id: plan_backend
        run: |
          terraform plan \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_name=galaxymatchdb" \
            -no-color
        working-directory: backend/terraform

      - name: Terraform Apply (Backend)
        id: apply_backend
        run: |
          terraform apply -auto-approve \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_name=galaxymatchdb" \
            -no-color
        working-directory: backend/terraform
      
      - name: Get Backend Outputs
        id: terraform_backend_output
        run: |
          echo "postgresql_server_endpoint=$(terraform output -raw postgresql_server_endpoint)" >> $GITHUB_OUTPUT
          echo "db_connection_string=$(terraform output -raw db_connection_string)" >> $GITHUB_OUTPUT
          echo "random_suffix=$(terraform output -raw random_suffix)" >> $GITHUB_OUTPUT
        working-directory: backend/terraform
        
      # Apply API infrastructure  
      - name: Terraform Init (API)
        id: init_api
        run: terraform init
        working-directory: api/terraform

      - name: Terraform Plan (API)
        id: plan_api
        run: terraform plan -no-color
        working-directory: api/terraform

      - name: Terraform Apply (API)
        id: apply_api
        run: terraform apply -auto-approve -no-color
        working-directory: api/terraform

      - name: Get API Outputs
        id: terraform_api_output
        run: |
          echo "api_instance_public_dns=$(terraform output -raw api_instance_public_dns)" >> $GITHUB_OUTPUT
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "random_suffix=$(terraform output -raw random_suffix)" >> $GITHUB_OUTPUT
        working-directory: api/terraform

  setup_secrets:
    name: Setup AWS Secrets Manager
    runs-on: ubuntu-latest
    needs: terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GithubActionsSession

      - name: Set Database Connection String
        run: |
          aws secretsmanager put-secret-value \
            --secret-id "ConnectionStrings/DefaultConnection-dev-${{ needs.terraform.outputs.api_suffix }}" \
            --secret-string "${{ needs.terraform.outputs.db_connection_string }}"
      
      - name: Set Google OAuth Secrets
        run: |
          aws secretsmanager put-secret-value \
            --secret-id "Google/ClientId-dev-${{ needs.terraform.outputs.api_suffix }}" \
            --secret-string "${{ secrets.GOOGLE_CLIENT_ID }}"
          
          aws secretsmanager put-secret-value \
            --secret-id "Google/ClientSecret-dev-${{ needs.terraform.outputs.api_suffix }}" \
            --secret-string "${{ secrets.GOOGLE_CLIENT_SECRET }}"
          
          aws secretsmanager put-secret-value \
            --secret-id "Google/RedirectUri-dev-${{ needs.terraform.outputs.api_suffix }}" \
            --secret-string "http://${{ needs.terraform.outputs.api_instance_dns }}/google-signin"
            
  build_deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    needs: [terraform, setup_secrets]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GithubActionsSession
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.terraform.outputs.ecr_repository_url }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f api/Dockerfile .
          docker push $ECR_REPOSITORY:$IMAGE_TAG