name: Apply API Terraform and Set Variables/Secrets

on:
  workflow_dispatch:

jobs:
  terraform:
    name: Apply Infrastructure
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.terraform_output.outputs.instance_public_ip }}
      role_arn: ${{ steps.terraform_output.outputs.role_arn }}
    
    defaults:
      run:
        working-directory: api/terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.0.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Create terraform.tfvars file
        run: |
          cat << EOF > terraform.tfvars
          github_org      = "galaxy-match-make"
          repository_name = "galaxy-match-make"
          ec2_public_key  = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOP/Zu8aiSS1cTH0XocYbnPJU/ByTvvCbCozz/NuOB8O VF-ROOT+nyirt001@BBD-TNY"
          EOF

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color

      - name: Output Terraform Variables
        id: terraform_output
        run: |
          echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
          echo "role_arn=$(terraform output -raw role_arn)" >> $GITHUB_OUTPUT

  set_variables_secrets:
    name: Set Repository Variables and Secrets
    runs-on: ubuntu-latest
    needs: terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set AWS_GITHUB_ACTIONS_ROLE_ARN variable
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            await github.rest.actions.createRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'AWS_GITHUB_ACTIONS_ROLE_ARN',
              value: '${{ needs.terraform.outputs.role_arn }}'
            });

      - name: Set EC2_INSTANCE_PUBLIC_IP variable
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            await github.rest.actions.createRepoVariable({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'EC2_INSTANCE_PUBLIC_IP',
              value: '${{ needs.terraform.outputs.instance_ip }}'
            });

      - name: Set HOST secret
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'HOST',
              encrypted_value: Buffer.from('${{ needs.terraform.outputs.instance_ip }}').toString('base64'),
              key_id: '' // Auto-filled by API
            });

      - name: Create USERNAME secret
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'USERNAME',
              encrypted_value: Buffer.from('ec2-user').toString('base64'),
              key_id: '' // Auto-filled by API
            });